{
  
    
        "post0": {
            "title": "Solving Wordle Using Information Theory",
            "content": "It&#39;s an interesting game to analyze from a programatic standpoint. Is there a strategy that can ensure that we guess the word of the day in as few guesses as possible? What is the best starting word? What&#39;s the worst starting word? . import itertools import string import requests import datetime import numpy as np import pandas as pd . . The Data . Wordle requires the player to input an actual five-letter words, so it forbids random assortment of letters like prsmt or aeiou which, theoretically would be good starting words. . There&#39;s are two lists of words that you are allowed to enter in the game that are considered valid guesses. The pool of allowable entries is a little less that 13,000 words long, but these is another curated list that contains about 2,300 possible answers. These lists are actually present in the source code on the website in the order that they appear, so it is technically possible to just look up tomorrows answer, but that&#39;d be cheating. . We will pull the lists from the JS file and sort them to remove the order information. Unfortunately, there isn&#39;t a great way to pull a variable or array from a JavaScript file into Python, so some hacky string manipulation will have to do. . # Legacy JS url = &quot;https://web.archive.org/web/20220101000805js_/https://www.powerlanguage.co.uk/wordle/main.db1931a8.js&quot; response = requests.get(url) data = response.text #valid_entries = data.split(&quot;,Oa=[&quot;)[1].split(&quot;]&quot;)[0].replace(&#39;&quot;&#39;,&quot;&quot;).upper().split(&quot;,&quot;) #wordle_answers = data.split(&quot;var Ma=[&quot;)[-1].split(&quot;]&quot;)[0].replace(&#39;&quot;&#39;,&quot;&quot;).upper().split(&quot;,&quot;) wordle_answers = data.split(&quot;var Aa=[&quot;)[-1].split(&quot;]&quot;)[0].replace(&#39;&quot;&#39;,&quot;&quot;).upper().split(&quot;,&quot;) valid_entries = data.split(&quot;,La=[&quot;)[-1].split(&quot;]&quot;)[0].replace(&#39;&quot;&#39;,&quot;&quot;).upper().split(&quot;,&quot;) valid_entries = sorted(list(set(wordle_answers + valid_entries))) wordle_answers = sorted(wordle_answers) print(f&quot;There are {len(wordle_answers)} possible answers in Wordle&quot;) print(f&quot;There are {len(valid_entries)} possible words that can be entered in Wordle&quot;) . There are 2315 possible answers in Wordle There are 12972 possible words that can be entered in Wordle . Game Mechanics . The game first starts with an empty 5x6 grid. We have to choose a starting word to begin the game. After we hit enter with our first guess, hidden information is revealed about the secret word using the letters of our submission. All five of our letters will change color based on if the letters are present in the hidden word. . . If our letter turns green, it means that the letter is present in the hidden word and in the correct position. Yellow means that the letter is in the word, but in the incorrect position. Gray means that the letter is not in the hidden word at all. . To begin with our analysis, we can create a function that returns the color sequence for a particular combination of words. We can start by generating a list of n length with each of the spaces representing a white space. The function will then check the position of each of the letters between two words of the same length. If the letters match up, it will overwrite the white space with a green space. If the letter is present in the word, but the positions don&#39;t match, it will overwrite the white space with a yellow space. . def indices(arr:list, value:str) -&gt; list: &quot;&quot;&quot;A function that takes in a list and a string and returns a list of index positions within the input list Args: arr (list): List to pull the index values from item (str): String to search for in the input list Returns: list: list of index positions of item &quot;&quot;&quot; return [ind for ind, x in enumerate(arr) if x == value] def color_sequence(guess:str, answer:str, emoji=True) -&gt; str: &quot;&quot;&quot;A function that takes returns a color sequence of a guess based on a predetermined answer Args: guess (str): The guess for the game answer (str): The answer for the game emoji (bool): True Returns a string of green, yellow and white square emojies False will return letters G,Y, and W Returns: str: Color sequence &quot;&quot;&quot; guess = list(guess) answer = list(answer) # Start with all spaces absent colors = [&quot;W&quot;] * (len(answer)) # If correct for ind, (g_letter, a_letter) in enumerate(zip(guess, answer)): if g_letter == a_letter: colors[ind] = &quot;G&quot; guess[ind] = &quot;&quot; answer[ind] = &quot;&quot; # If present for ind, (g_letter, a_letter) in enumerate(zip(guess, answer)): if g_letter != a_letter and g_letter in answer and g_letter != &quot;&quot;: g = indices(guess, g_letter) a = indices(answer, g_letter) if not any(i in g for i in a): colors[ind] = &quot;Y&quot; answer[answer.index(g_letter)] = &quot;&quot; colors = &quot;&quot;.join(colors) if emoji: colors = (colors .replace(&quot;G&quot;,&quot;🟩&quot;) .replace(&quot;Y&quot;,&quot;🟨&quot;) .replace(&quot;W&quot;,&quot;⬜&quot;)) return colors . All Possible Color Sequences . We have a total of three different colors to choose from with a total of five positions. This yields a total of $3^5$ combinations, or 243 total combos. However, there are a few combinations that can&#39;t be returns like 🟩🟩🟩🟩🟨, 🟩🟩🟩🟨🟩, 🟩🟩🟨🟩🟩 and so on. . combinations = [&quot;&quot;.join(i) for i in itertools.product(&quot;⬜🟨🟩&quot;, repeat = 5)] remove = [&quot;&quot;.join(i) for i in itertools.product(&quot;🟩🟨&quot;, repeat = 5)] remove = [i for i in remove if len(indices(i,&quot;🟩&quot;)) &gt; 3] combinations = set(combinations)-set(remove[1::]) for ind, i in enumerate(sorted(combinations), start = 1): print(i, end =&quot; &quot;) if ind % 7 == 0: print(&quot;&quot;) . ⬜⬜⬜⬜⬜ ⬜⬜⬜⬜🟨 ⬜⬜⬜⬜🟩 ⬜⬜⬜🟨⬜ ⬜⬜⬜🟨🟨 ⬜⬜⬜🟨🟩 ⬜⬜⬜🟩⬜ ⬜⬜⬜🟩🟨 ⬜⬜⬜🟩🟩 ⬜⬜🟨⬜⬜ ⬜⬜🟨⬜🟨 ⬜⬜🟨⬜🟩 ⬜⬜🟨🟨⬜ ⬜⬜🟨🟨🟨 ⬜⬜🟨🟨🟩 ⬜⬜🟨🟩⬜ ⬜⬜🟨🟩🟨 ⬜⬜🟨🟩🟩 ⬜⬜🟩⬜⬜ ⬜⬜🟩⬜🟨 ⬜⬜🟩⬜🟩 ⬜⬜🟩🟨⬜ ⬜⬜🟩🟨🟨 ⬜⬜🟩🟨🟩 ⬜⬜🟩🟩⬜ ⬜⬜🟩🟩🟨 ⬜⬜🟩🟩🟩 ⬜🟨⬜⬜⬜ ⬜🟨⬜⬜🟨 ⬜🟨⬜⬜🟩 ⬜🟨⬜🟨⬜ ⬜🟨⬜🟨🟨 ⬜🟨⬜🟨🟩 ⬜🟨⬜🟩⬜ ⬜🟨⬜🟩🟨 ⬜🟨⬜🟩🟩 ⬜🟨🟨⬜⬜ ⬜🟨🟨⬜🟨 ⬜🟨🟨⬜🟩 ⬜🟨🟨🟨⬜ ⬜🟨🟨🟨🟨 ⬜🟨🟨🟨🟩 ⬜🟨🟨🟩⬜ ⬜🟨🟨🟩🟨 ⬜🟨🟨🟩🟩 ⬜🟨🟩⬜⬜ ⬜🟨🟩⬜🟨 ⬜🟨🟩⬜🟩 ⬜🟨🟩🟨⬜ ⬜🟨🟩🟨🟨 ⬜🟨🟩🟨🟩 ⬜🟨🟩🟩⬜ ⬜🟨🟩🟩🟨 ⬜🟨🟩🟩🟩 ⬜🟩⬜⬜⬜ ⬜🟩⬜⬜🟨 ⬜🟩⬜⬜🟩 ⬜🟩⬜🟨⬜ ⬜🟩⬜🟨🟨 ⬜🟩⬜🟨🟩 ⬜🟩⬜🟩⬜ ⬜🟩⬜🟩🟨 ⬜🟩⬜🟩🟩 ⬜🟩🟨⬜⬜ ⬜🟩🟨⬜🟨 ⬜🟩🟨⬜🟩 ⬜🟩🟨🟨⬜ ⬜🟩🟨🟨🟨 ⬜🟩🟨🟨🟩 ⬜🟩🟨🟩⬜ ⬜🟩🟨🟩🟨 ⬜🟩🟨🟩🟩 ⬜🟩🟩⬜⬜ ⬜🟩🟩⬜🟨 ⬜🟩🟩⬜🟩 ⬜🟩🟩🟨⬜ ⬜🟩🟩🟨🟨 ⬜🟩🟩🟨🟩 ⬜🟩🟩🟩⬜ ⬜🟩🟩🟩🟨 ⬜🟩🟩🟩🟩 🟨⬜⬜⬜⬜ 🟨⬜⬜⬜🟨 🟨⬜⬜⬜🟩 🟨⬜⬜🟨⬜ 🟨⬜⬜🟨🟨 🟨⬜⬜🟨🟩 🟨⬜⬜🟩⬜ 🟨⬜⬜🟩🟨 🟨⬜⬜🟩🟩 🟨⬜🟨⬜⬜ 🟨⬜🟨⬜🟨 🟨⬜🟨⬜🟩 🟨⬜🟨🟨⬜ 🟨⬜🟨🟨🟨 🟨⬜🟨🟨🟩 🟨⬜🟨🟩⬜ 🟨⬜🟨🟩🟨 🟨⬜🟨🟩🟩 🟨⬜🟩⬜⬜ 🟨⬜🟩⬜🟨 🟨⬜🟩⬜🟩 🟨⬜🟩🟨⬜ 🟨⬜🟩🟨🟨 🟨⬜🟩🟨🟩 🟨⬜🟩🟩⬜ 🟨⬜🟩🟩🟨 🟨⬜🟩🟩🟩 🟨🟨⬜⬜⬜ 🟨🟨⬜⬜🟨 🟨🟨⬜⬜🟩 🟨🟨⬜🟨⬜ 🟨🟨⬜🟨🟨 🟨🟨⬜🟨🟩 🟨🟨⬜🟩⬜ 🟨🟨⬜🟩🟨 🟨🟨⬜🟩🟩 🟨🟨🟨⬜⬜ 🟨🟨🟨⬜🟨 🟨🟨🟨⬜🟩 🟨🟨🟨🟨⬜ 🟨🟨🟨🟨🟨 🟨🟨🟨🟨🟩 🟨🟨🟨🟩⬜ 🟨🟨🟨🟩🟨 🟨🟨🟨🟩🟩 🟨🟨🟩⬜⬜ 🟨🟨🟩⬜🟨 🟨🟨🟩⬜🟩 🟨🟨🟩🟨⬜ 🟨🟨🟩🟨🟨 🟨🟨🟩🟨🟩 🟨🟨🟩🟩⬜ 🟨🟨🟩🟩🟨 🟨🟨🟩🟩🟩 🟨🟩⬜⬜⬜ 🟨🟩⬜⬜🟨 🟨🟩⬜⬜🟩 🟨🟩⬜🟨⬜ 🟨🟩⬜🟨🟨 🟨🟩⬜🟨🟩 🟨🟩⬜🟩⬜ 🟨🟩⬜🟩🟨 🟨🟩⬜🟩🟩 🟨🟩🟨⬜⬜ 🟨🟩🟨⬜🟨 🟨🟩🟨⬜🟩 🟨🟩🟨🟨⬜ 🟨🟩🟨🟨🟨 🟨🟩🟨🟨🟩 🟨🟩🟨🟩⬜ 🟨🟩🟨🟩🟨 🟨🟩🟨🟩🟩 🟨🟩🟩⬜⬜ 🟨🟩🟩⬜🟨 🟨🟩🟩⬜🟩 🟨🟩🟩🟨⬜ 🟨🟩🟩🟨🟨 🟨🟩🟩🟨🟩 🟨🟩🟩🟩⬜ 🟨🟩🟩🟩🟨 🟩⬜⬜⬜⬜ 🟩⬜⬜⬜🟨 🟩⬜⬜⬜🟩 🟩⬜⬜🟨⬜ 🟩⬜⬜🟨🟨 🟩⬜⬜🟨🟩 🟩⬜⬜🟩⬜ 🟩⬜⬜🟩🟨 🟩⬜⬜🟩🟩 🟩⬜🟨⬜⬜ 🟩⬜🟨⬜🟨 🟩⬜🟨⬜🟩 🟩⬜🟨🟨⬜ 🟩⬜🟨🟨🟨 🟩⬜🟨🟨🟩 🟩⬜🟨🟩⬜ 🟩⬜🟨🟩🟨 🟩⬜🟨🟩🟩 🟩⬜🟩⬜⬜ 🟩⬜🟩⬜🟨 🟩⬜🟩⬜🟩 🟩⬜🟩🟨⬜ 🟩⬜🟩🟨🟨 🟩⬜🟩🟨🟩 🟩⬜🟩🟩⬜ 🟩⬜🟩🟩🟨 🟩⬜🟩🟩🟩 🟩🟨⬜⬜⬜ 🟩🟨⬜⬜🟨 🟩🟨⬜⬜🟩 🟩🟨⬜🟨⬜ 🟩🟨⬜🟨🟨 🟩🟨⬜🟨🟩 🟩🟨⬜🟩⬜ 🟩🟨⬜🟩🟨 🟩🟨⬜🟩🟩 🟩🟨🟨⬜⬜ 🟩🟨🟨⬜🟨 🟩🟨🟨⬜🟩 🟩🟨🟨🟨⬜ 🟩🟨🟨🟨🟨 🟩🟨🟨🟨🟩 🟩🟨🟨🟩⬜ 🟩🟨🟨🟩🟨 🟩🟨🟨🟩🟩 🟩🟨🟩⬜⬜ 🟩🟨🟩⬜🟨 🟩🟨🟩⬜🟩 🟩🟨🟩🟨⬜ 🟩🟨🟩🟨🟨 🟩🟨🟩🟨🟩 🟩🟨🟩🟩⬜ 🟩🟨🟩🟩🟨 🟩🟩⬜⬜⬜ 🟩🟩⬜⬜🟨 🟩🟩⬜⬜🟩 🟩🟩⬜🟨⬜ 🟩🟩⬜🟨🟨 🟩🟩⬜🟨🟩 🟩🟩⬜🟩⬜ 🟩🟩⬜🟩🟨 🟩🟩⬜🟩🟩 🟩🟩🟨⬜⬜ 🟩🟩🟨⬜🟨 🟩🟩🟨⬜🟩 🟩🟩🟨🟨⬜ 🟩🟩🟨🟨🟨 🟩🟩🟨🟨🟩 🟩🟩🟨🟩⬜ 🟩🟩🟨🟩🟨 🟩🟩🟩⬜⬜ 🟩🟩🟩⬜🟨 🟩🟩🟩⬜🟩 🟩🟩🟩🟨⬜ 🟩🟩🟩🟨🟨 🟩🟩🟩🟩⬜ 🟩🟩🟩🟩🟩 . We will also want to create a function that takes in a guess and a color sequence to find the words in the corpus that match the sequence. . def get_words_using_sequence(input_word, sequence, corpus): return [word for word in corpus if color_sequence(input_word, word) == sequence] . There is a special mechanic for duplicate letters. If a guess contains duplicate letters but the answer only has one of the letters, the first letter in the guess will appear yellow and the second will appear white. If there are two duplicate characters and they are both misplaced, they will both appear yellow. The same goes for combinations of matching and present characters. We can verify our function returns the correct values for the the following guess HELLO when the answer varies in the number of Ls. . print(&quot;Game Mechanics for Duplicate Letters&quot;) print(f&quot; H E L L O&quot;) print(&quot;HYDRO&quot;, color_sequence(guess = &quot;HELLO&quot;, answer = &quot;HYDRO&quot;), &quot;No L&#39;s&quot;) print(&quot;HAZEL&quot;, color_sequence(guess = &quot;HELLO&quot;, answer = &quot;HAZEL&quot;), &quot;One L: misplaced&quot;) print(&quot;GOLEM&quot;, color_sequence(guess = &quot;HELLO&quot;, answer = &quot;GOLEM&quot;), &quot;One L: correct&quot;) print(&quot;NOBLE&quot;, color_sequence(guess = &quot;HELLO&quot;, answer = &quot;NOBLE&quot;), &quot;One L: correct&quot;) print(&quot;LLAMA&quot;, color_sequence(guess = &quot;HELLO&quot;, answer = &quot;LLAMA&quot;), &quot;Two L&#39;s: both misplaced&quot;) print(&quot;ALLEY&quot;, color_sequence(guess = &quot;HELLO&quot;, answer = &quot;ALLEY&quot;), &quot;Two L&#39;s: one correct, one misplaced&quot;) print(&quot;TROLL&quot;, color_sequence(guess = &quot;HELLO&quot;, answer = &quot;TROLL&quot;), &quot;Two L&#39;s: one correct, one misplaced&quot;) print(&quot;JOLLY&quot;, color_sequence(guess = &quot;HELLO&quot;, answer = &quot;JOLLY&quot;), &quot;Two L&#39;s: both correct&quot;) . Game Mechanics for Duplicate Letters H E L L O HYDRO 🟩⬜⬜⬜🟩 No L&#39;s HAZEL 🟩🟨🟨⬜⬜ One L: misplaced GOLEM ⬜🟨🟩⬜🟨 One L: correct NOBLE ⬜🟨⬜🟩🟨 One L: correct LLAMA ⬜⬜🟨🟨⬜ Two L&#39;s: both misplaced ALLEY ⬜🟨🟩🟨⬜ Two L&#39;s: one correct, one misplaced TROLL ⬜⬜🟨🟩🟨 Two L&#39;s: one correct, one misplaced JOLLY ⬜⬜🟩🟩🟨 Two L&#39;s: both correct . Calculating the Entropy . Now, we can generate a list of words that match the sequence we recieve from the game. This won&#39;t always be very helpful. We may get stuck in a loop of possible answers, which a common way to fail the game. For example, if we use SPARK and get the 🟩⬜🟩🟩⬜ sequence, we get back several possible answers. . reduced_corpus = get_words_using_sequence(&#39;SPARK&#39;, &quot;🟩⬜🟩🟩⬜&quot;, wordle_answers) print(reduced_corpus) . [&#39;SCARE&#39;, &#39;SCARF&#39;, &#39;SCARY&#39;, &#39;SHARD&#39;, &#39;SHARE&#39;, &#39;SMART&#39;, &#39;SNARE&#39;, &#39;SNARL&#39;, &#39;STARE&#39;, &#39;START&#39;, &#39;SWARM&#39;] . Instead of trying each of the possible answers, we can use a turn to reduce the amount of possible answers. For example, THYME would be a great word to use in this case. All but two of the possible answers will have unique sequences which we can use to narrow down the answer much faster in a much more repeatable way. . print(&quot; T H Y M E&quot;) for word in reduced_corpus: print(word, color_sequence(guess = &quot;THYME&quot;, answer = word)) . T H Y M E SCARE ⬜⬜⬜⬜🟩 SCARF ⬜⬜⬜⬜⬜ SCARY ⬜⬜🟨⬜⬜ SHARD ⬜🟩⬜⬜⬜ SHARE ⬜🟩⬜⬜🟩 SMART 🟨⬜⬜🟨⬜ SNARE ⬜⬜⬜⬜🟩 SNARL ⬜⬜⬜⬜⬜ STARE 🟨⬜⬜⬜🟩 START 🟨⬜⬜⬜⬜ SWARM ⬜⬜⬜🟨⬜ . We can use this principle on all the the available words to find which one fits the best. Since we have the complete list of possible entries for Wordle, we can now iterate through the list, finding how many different combinations of sequences there are for each word and counting how many times each sequence occurs. Using that information, we can calculate the probability of each sequence occuring and also calculate the entropy that each sequence returns. . Entropy in this case is a measure of how far we reduce the possible pool of answers. It can be calculated by taking the log-base 2 of the percentage of answers given that are possible for a given sequence. . $$ I(E) = log_2 left( frac{1}{p(E)} right) $$For example, if we use the word PIZZA as a starting word, which would instictually be a bad starting word due to the double Zs, and get ⬜⬜⬜🟩⬜, we reduce our possible pool of answers from 12,972 to 25. That provides an entropy value of 9.02 bits. . BONZE, BOOZE, BOOZY, CLOZE, COOZE, CROZE, DOOZY, FEEZE, FORZE, FROZE, FURZE, FURZY, GLOZE, GONZO, HEEZE, JEEZE, KUDZU, LEEZE, NEEZE, NUDZH, TOUZE, TOUZY, TOWZE, TOWZY, WOOZY . If instead, we got a more likely response of ⬜⬜⬜⬜⬜, we would reduce our pool of answers by a little over half, from 12,972 to 4,145. . def count_of_combos(guess:str, answers:list, sort = False, probability = True, verbose = False) -&gt; dict: &quot;&quot;&quot;A function that takes in a list and a string and returns a list of index positions within the input list Args: guess (str): A string to compare all the answers against answers (list): A list containing all possible combinations of answers sort (bool): False Sorts the return dictionary by value probability (bool): True Converts the values in the dictionary to a probability Returns: list: list of index positions of item &quot;&quot;&quot; results_dict = {} increment_value = 1 if probability is True: increment_value /= len(answers) for ans in answers: seq = color_sequence(guess, ans) if seq in results_dict: results_dict[seq] += increment_value else: results_dict[seq] = increment_value if sort: results_dict = dict(sorted(results_dict.items(), key=lambda item: item[1], reverse=True)) return results_dict . word = &quot;PIZZA&quot; word_combinations = count_of_combos(word, valid_entries, probability=True, sort = True) print(f&quot;Data for Each Color Combinations for the Word {word} n&quot;) print(f&quot;{&#39;Sequence&#39;:^12} {&#39;Count&#39;:&lt;8} {&#39;%&#39;:&lt;5} {&#39;Bits&#39;} &quot;*3) for ind, (key, value) in enumerate(word_combinations.items(), start = 1): print(f&quot;{key}| {round(value*len(valid_entries)):&lt;5}|{f&#39;{value*100:.2f}%&#39;:&gt;6s}| {f&#39;{np.log2(1/value):.2f}&#39;:&gt;5s}&quot;, end = &quot; &quot;) if ind % 3 == 0: print() . Data for Each Color Combinations for the Word PIZZA Sequence Count % Bits Sequence Count % Bits Sequence Count % Bits ⬜⬜⬜⬜⬜| 4145 |31.95%| 1.65 ⬜⬜⬜⬜🟨| 3167 |24.41%| 2.03 ⬜🟨⬜⬜⬜| 1190 | 9.17%| 3.45 ⬜🟩⬜⬜⬜| 956 | 7.37%| 3.76 ⬜🟨⬜⬜🟨| 576 | 4.44%| 4.49 🟨⬜⬜⬜⬜| 442 | 3.41%| 4.88 ⬜⬜⬜⬜🟩| 408 | 3.15%| 4.99 🟩⬜⬜⬜⬜| 358 | 2.76%| 5.18 🟨⬜⬜⬜🟨| 309 | 2.38%| 5.39 🟩⬜⬜⬜🟨| 219 | 1.69%| 5.89 ⬜🟩⬜⬜🟨| 136 | 1.05%| 6.58 🟨🟨⬜⬜⬜| 126 | 0.97%| 6.69 ⬜🟨⬜⬜🟩| 84 | 0.65%| 7.27 🟩🟩⬜⬜⬜| 81 | 0.62%| 7.32 🟩🟨⬜⬜⬜| 79 | 0.61%| 7.36 ⬜🟩⬜⬜🟩| 62 | 0.48%| 7.71 🟨🟩⬜⬜⬜| 58 | 0.45%| 7.81 🟩⬜⬜⬜🟩| 44 | 0.34%| 8.20 ⬜⬜🟨⬜⬜| 42 | 0.32%| 8.27 ⬜⬜🟩⬜🟨| 41 | 0.32%| 8.31 🟨🟨⬜⬜🟨| 37 | 0.29%| 8.45 ⬜⬜🟩⬜⬜| 36 | 0.28%| 8.49 ⬜⬜🟨⬜🟨| 35 | 0.27%| 8.53 🟩🟨⬜⬜🟨| 34 | 0.26%| 8.58 🟨⬜⬜⬜🟩| 30 | 0.23%| 8.76 ⬜⬜⬜🟩🟨| 26 | 0.20%| 8.96 ⬜⬜⬜🟩⬜| 25 | 0.19%| 9.02 🟩🟩⬜⬜🟨| 20 | 0.15%| 9.34 ⬜🟩🟨⬜⬜| 17 | 0.13%| 9.58 ⬜🟨🟨⬜⬜| 15 | 0.12%| 9.76 ⬜🟩🟩⬜⬜| 14 | 0.11%| 9.86 ⬜🟨🟨⬜🟨| 13 | 0.10%| 9.96 ⬜⬜⬜🟩🟩| 12 | 0.09%| 10.08 ⬜⬜🟩🟩⬜| 9 | 0.07%| 10.49 ⬜🟨🟩⬜⬜| 8 | 0.06%| 10.66 ⬜🟨⬜🟩🟨| 7 | 0.05%| 10.86 ⬜⬜🟨⬜🟩| 7 | 0.05%| 10.86 ⬜🟩🟩🟩⬜| 6 | 0.05%| 11.08 ⬜🟨⬜🟩⬜| 6 | 0.05%| 11.08 🟩🟩⬜⬜🟩| 6 | 0.05%| 11.08 🟨🟨⬜⬜🟩| 5 | 0.04%| 11.34 ⬜🟩🟩⬜🟨| 4 | 0.03%| 11.66 ⬜🟨🟨🟩⬜| 4 | 0.03%| 11.66 ⬜🟩⬜🟩⬜| 4 | 0.03%| 11.66 ⬜🟨🟩⬜🟨| 4 | 0.03%| 11.66 🟩🟨⬜⬜🟩| 4 | 0.03%| 11.66 🟨⬜🟨⬜🟨| 4 | 0.03%| 11.66 ⬜⬜🟩🟩🟩| 3 | 0.02%| 12.08 ⬜⬜🟩🟩🟨| 3 | 0.02%| 12.08 🟨🟩⬜⬜🟩| 3 | 0.02%| 12.08 ⬜🟩🟨⬜🟨| 3 | 0.02%| 12.08 ⬜⬜🟨🟩🟨| 2 | 0.02%| 12.66 ⬜🟨⬜🟩🟩| 2 | 0.02%| 12.66 🟨🟩⬜⬜🟨| 2 | 0.02%| 12.66 ⬜🟨🟩🟨⬜| 2 | 0.02%| 12.66 🟩🟨⬜🟩⬜| 2 | 0.02%| 12.66 🟩🟩🟩⬜⬜| 2 | 0.02%| 12.66 ⬜🟨🟨⬜🟩| 2 | 0.02%| 12.66 🟨🟩🟨⬜⬜| 2 | 0.02%| 12.66 ⬜🟩🟩🟨⬜| 2 | 0.02%| 12.66 🟨⬜🟨⬜🟩| 2 | 0.02%| 12.66 🟨🟨🟨⬜🟨| 1 | 0.01%| 13.66 ⬜🟩⬜🟩🟨| 1 | 0.01%| 13.66 ⬜🟨🟩🟨🟨| 1 | 0.01%| 13.66 ⬜🟨🟩🟩🟨| 1 | 0.01%| 13.66 ⬜🟩⬜🟩🟩| 1 | 0.01%| 13.66 🟩⬜⬜🟩🟨| 1 | 0.01%| 13.66 🟩🟨🟨🟩⬜| 1 | 0.01%| 13.66 🟩🟩⬜🟩⬜| 1 | 0.01%| 13.66 🟩🟩🟩🟩🟩| 1 | 0.01%| 13.66 🟩⬜⬜🟩🟩| 1 | 0.01%| 13.66 🟩⬜🟨⬜⬜| 1 | 0.01%| 13.66 🟩⬜⬜🟩⬜| 1 | 0.01%| 13.66 🟩⬜🟩🟩⬜| 1 | 0.01%| 13.66 🟩⬜🟩⬜⬜| 1 | 0.01%| 13.66 🟩⬜🟨🟩🟨| 1 | 0.01%| 13.66 ⬜⬜🟨🟩⬜| 1 | 0.01%| 13.66 🟨⬜⬜🟩🟩| 1 | 0.01%| 13.66 🟨⬜🟨🟩🟨| 1 | 0.01%| 13.66 🟨🟨🟨⬜⬜| 1 | 0.01%| 13.66 🟨🟨🟩⬜⬜| 1 | 0.01%| 13.66 ⬜⬜🟨🟩🟩| 1 | 0.01%| 13.66 ⬜⬜🟩🟨🟨| 1 | 0.01%| 13.66 ⬜⬜🟩🟨⬜| 1 | 0.01%| 13.66 ⬜🟩🟨⬜🟩| 1 | 0.01%| 13.66 🟨⬜🟨⬜⬜| 1 | 0.01%| 13.66 . We can now take the weight each combinations entropy by the probability of it occuring to get the entropy for each word and summing them all together to get the total entropy calculated for each word. . $$H(X) = sum {p} log_2( frac{1}{p}) $$ . def sum_entropy_calculation(combinations): entropy = 0 for key, value in combinations.items(): entropy += value * (-1 * np.log2(value)) return entropy . print(f&quot;The calculated entropy for the {word} is {sum_entropy_calculation(word_combinations):.2f} Sh&quot;) . The calculated entropy for the PIZZA is 3.27 Sh . Now that we can calculate the entropy for one word, we can calculate the entropy for all of them by iterating over the list of words in the corpus. . def entropy_df(inputs, corpus): entropy_dict = {} for i in inputs: combs = count_of_combos(i, corpus) entropy_dict[i] = sum_entropy_calculation(combs) df = pd.DataFrame([[key, val] for key, val in entropy_dict.items()], columns = [&#39;WORD&#39;,&#39;ENTROPY&#39;]).sort_values(&quot;ENTROPY&quot;, ascending=False) df.index = df[&#39;WORD&#39;] df.drop([&#39;WORD&#39;], axis = 1, inplace=True) return df . df = entropy_df(valid_entries, wordle_answers) . Here are the top 10 starting words based on entropy. . df.head(10) . ENTROPY . WORD . SOARE 5.885960 | . ROATE 5.882779 | . RAISE 5.877910 | . RAILE 5.865710 | . REAST 5.865457 | . SLATE 5.855775 | . CRATE 5.834874 | . SALET 5.834582 | . IRATE 5.831397 | . TRACE 5.830549 | . and here are the 10 worst starting words. Unsuprisingly, many of them have duplicate and triplicate letters. . df.tail(10).sort_values(&#39;ENTROPY&#39;) . ENTROPY . WORD . QAJAQ 1.891836 | . JUJUS 2.038309 | . IMMIX 2.052600 | . XYLYL 2.192001 | . YUKKY 2.205266 | . PZAZZ 2.214171 | . JAFFA 2.234170 | . FUFFY 2.243640 | . KUDZU 2.264022 | . GYPPY 2.285137 | . Follow Up Guesses . Since we know the best starting word is SOARE, we can calculate what the next best word will be based on the sequence we get from SOARE The sequences below and their associated word yield the best entropy for the second term. Most of the time, the answer can be achieved in 3 guessses. . word = &quot;SOARE&quot; ind = 0 d = count_of_combos(word, wordle_answers, probability=True) for sequence in sorted(d.keys()): corpus = wordle_answers corpus = get_words_using_sequence(word, sequence, corpus) super_dict = {} for answer in wordle_answers: combs = count_of_combos(answer, corpus) super_dict[answer] = sum_entropy_calculation(combs) df = pd.DataFrame([[key, val] for key, val in super_dict.items()], columns = [&#39;WORD&#39;,&#39;ENTROPY&#39;]) df[&#39;IN_CORPUS&#39;] = [1 if word in corpus else 0 for word in df[&#39;WORD&#39;]] df = df.sort_values([&#39;ENTROPY&#39;,&#39;IN_CORPUS&#39;], ascending=False) df.index = df[&#39;WORD&#39;] df = df[[False if entropy == 1 and in_corpus == 0 else True for entropy, in_corpus in zip(df[&#39;ENTROPY&#39;], df[&#39;IN_CORPUS&#39;])]] df = df[[False if entropy == 0 and in_corpus == 0 else True for entropy, in_corpus in zip(df[&#39;ENTROPY&#39;], df[&#39;IN_CORPUS&#39;])]] df = df.reset_index(drop=True) print(f&#39;{sequence} {df.iloc[0][&quot;WORD&quot;]}: {df.iloc[0][&quot;ENTROPY&quot;]:.2f}&#39;, end = &quot; &quot;) ind += 1 if ind % 4 == 0: print() . ⬜⬜⬜⬜⬜ LUNCH: 5.24 ⬜⬜⬜⬜🟨 BETEL: 5.02 ⬜⬜⬜⬜🟩 GUILT: 5.07 ⬜⬜⬜🟨⬜ GLINT: 4.66 ⬜⬜⬜🟨🟨 DETER: 4.40 ⬜⬜⬜🟨🟩 TRUMP: 3.81 ⬜⬜⬜🟩⬜ TOUCH: 3.55 ⬜⬜⬜🟩🟨 BEEFY: 3.32 ⬜⬜⬜🟩🟩 THERE: 2.00 ⬜⬜🟨⬜⬜ MINTY: 4.87 ⬜⬜🟨⬜🟨 CANAL: 4.59 ⬜⬜🟨⬜🟩 LAUGH: 3.87 ⬜⬜🟨🟨⬜ RADAR: 4.21 ⬜⬜🟨🟨🟨 BETEL: 3.59 ⬜⬜🟨🟨🟩 CAROL: 2.81 ⬜⬜🟨🟩⬜ MARCH: 3.10 ⬜⬜🟨🟩🟨 ALTAR: 2.32 ⬜⬜🟨🟩🟩 AFIRE: 1.00 ⬜⬜🟩⬜⬜ CLINK: 4.60 ⬜⬜🟩⬜🟨 DEPTH: 3.75 ⬜⬜🟩⬜🟩 CLUNG: 3.12 ⬜⬜🟩🟨⬜ GLINT: 4.02 ⬜⬜🟩🟨🟨 ADMIT: 2.00 ⬜⬜🟩🟨🟩 DITCH: 2.97 ⬜⬜🟩🟩⬜ AUDIT: 3.39 ⬜⬜🟩🟩🟨 HANDY: 2.73 ⬜⬜🟩🟩🟩 BAGEL: 2.00 ⬜🟨⬜⬜⬜ GLINT: 4.81 ⬜🟨⬜⬜🟨 DEMON: 3.91 ⬜🟨⬜⬜🟩 CLINK: 3.78 ⬜🟨⬜🟨⬜ TUNIC: 3.95 ⬜🟨⬜🟨🟨 DETER: 3.03 ⬜🟨⬜🟨🟩 PINTO: 2.69 ⬜🟨⬜🟩⬜ CYNIC: 3.00 ⬜🟨⬜🟩🟨 METRO: 1.58 ⬜🟨⬜🟩🟩 CHORE: 1.00 ⬜🟨🟨⬜⬜ BLUNT: 4.28 ⬜🟨🟨⬜🟨 CAMEO: 2.00 ⬜🟨🟨⬜🟩 ABLED: 2.75 ⬜🟨🟨🟨⬜ BARON: 3.63 ⬜🟨🟨🟩⬜ ABACK: 2.58 ⬜🟨🟨🟩🟨 OPERA: 0.00 ⬜🟨🟨🟩🟩 ADORE: 0.00 ⬜🟨🟩⬜⬜ PIANO: 0.00 ⬜🟨🟩⬜🟩 OVATE: 0.00 ⬜🟨🟩🟨⬜ BRAVO: 0.00 ⬜🟨🟩🟩⬜ OVARY: 0.00 ⬜🟩⬜⬜⬜ LUNCH: 4.24 ⬜🟩⬜⬜🟨 MONTH: 3.43 ⬜🟩⬜⬜🟩 CLOUD: 3.32 ⬜🟩⬜🟨⬜ MUNCH: 3.71 ⬜🟩⬜🟨🟨 WATCH: 2.40 ⬜🟩⬜🟨🟩 FIGHT: 2.95 ⬜🟩⬜🟩⬜ ADULT: 2.58 ⬜🟩🟨⬜⬜ DELTA: 3.42 ⬜🟩🟨🟨⬜ BALMY: 3.00 ⬜🟩🟨🟩⬜ COBRA: 0.00 ⬜🟩🟩⬜⬜ LOAMY: 2.32 ⬜🟩🟩🟨⬜ ROACH: 0.00 ⬜🟩🟩🟩⬜ BOARD: 1.00 🟨⬜⬜⬜⬜ MIGHT: 4.25 🟨⬜⬜⬜🟨 BUILT: 3.62 🟨⬜⬜⬜🟩 INEPT: 3.00 🟨⬜⬜🟨⬜ TRUCK: 3.62 🟨⬜⬜🟨🟨 WITCH: 3.27 🟨⬜⬜🟨🟩 COUNT: 2.81 🟨⬜⬜🟩⬜ USURP: 0.00 🟨⬜🟨⬜⬜ UNITY: 3.90 🟨⬜🟨⬜🟨 ANKLE: 2.32 🟨⬜🟨⬜🟩 THUMP: 3.14 🟨⬜🟨🟨⬜ HARSH: 2.00 🟨⬜🟨🟨🟩 ARISE: 1.58 🟨⬜🟩⬜⬜ GULCH: 3.32 🟨⬜🟩⬜🟨 LEFTY: 2.32 🟨⬜🟩⬜🟩 BELCH: 2.81 🟨⬜🟩🟨⬜ PATCH: 2.52 🟨⬜🟩🟨🟩 ERASE: 0.00 🟨🟨⬜⬜⬜ ALONG: 2.81 🟨🟨⬜⬜🟨 ONSET: 1.58 🟨🟨⬜⬜🟩 BATCH: 2.32 🟨🟨⬜🟨⬜ DIGIT: 2.32 🟨🟨⬜🟨🟨 VERSO: 0.00 🟨🟨⬜🟨🟩 PROSE: 0.00 🟨🟨🟨⬜⬜ ASCOT: 1.58 🟨🟨🟨🟨⬜ ARSON: 0.00 🟨🟨🟨🟨🟩 AROSE: 0.00 🟨🟨🟩⬜⬜ CHAOS: 0.00 🟨🟩⬜⬜⬜ THUMB: 3.46 🟨🟩⬜⬜🟨 NOSEY: 1.00 🟨🟩⬜⬜🟩 CUMIN: 2.85 🟨🟩⬜🟨⬜ ROOST: 2.00 🟨🟩⬜🟨🟨 LOSER: 1.00 🟨🟩⬜🟨🟩 HORSE: 1.58 🟨🟩🟩⬜⬜ ABACK: 1.58 🟨🟩🟩🟨⬜ ROAST: 0.00 🟩⬜⬜⬜⬜ THINK: 4.84 🟩⬜⬜⬜🟨 SPILT: 4.23 🟩⬜⬜⬜🟩 CLINK: 3.71 🟩⬜⬜🟨⬜ BUTCH: 3.17 🟩⬜⬜🟨🟨 HENCE: 3.03 🟩⬜⬜🟨🟩 SCREE: 2.00 🟩⬜⬜🟩⬜ FILTH: 3.00 🟩⬜⬜🟩🟨 SPERM: 1.00 🟩⬜⬜🟩🟩 SHIRE: 1.00 🟩⬜🟨⬜⬜ ADULT: 3.58 🟩⬜🟨⬜🟨 KNELT: 2.95 🟩⬜🟨⬜🟩 SAUCE: 1.58 🟩⬜🟨🟨⬜ EMPTY: 3.00 🟩⬜🟨🟨🟨 HUMAN: 2.25 🟩⬜🟩⬜⬜ THINK: 4.17 🟩⬜🟩⬜🟩 CLOTH: 3.03 🟩⬜🟩🟨⬜ STAIR: 0.00 🟩⬜🟩🟩⬜ THICK: 2.73 🟩⬜🟩🟩🟩 CHANT: 2.32 🟩🟨⬜⬜⬜ PUNCH: 3.80 🟩🟨⬜⬜🟩 KNELT: 2.92 🟩🟨⬜🟨⬜ SCOUR: 0.00 🟩🟨⬜🟩⬜ CHANT: 2.85 🟩🟨⬜🟩🟩 CHANT: 2.25 🟩🟨🟨⬜⬜ SALON: 2.00 🟩🟨🟨🟨⬜ SAVOR: 0.00 🟩🟩⬜⬜⬜ AUNTY: 2.81 🟩🟩⬜⬜🟩 SOLVE: 0.00 🟩🟩⬜🟨🟨 SOBER: 1.00 🟩🟩⬜🟩⬜ SORRY: 0.00 🟩🟩🟨🟨⬜ SOLAR: 1.00 🟩🟩🟩⬜⬜ SOAPY: 0.00 . Hard Mode . Hard mode is a mode where the player needs to use the letters they&#39;ve unlocked in subsequence guesses. This makes narrowing down the correct answer a little trickier, but we should still be able to narrow down our pool of guesses relatively quickly. . corpus = wordle_answers guess = &quot;SOARE&quot; ind = 0 best_response = {} for i in sorted(combinations): new_corpus = get_words_using_sequence(guess, i, corpus) super_dict = {} for answer in new_corpus: combs = count_of_combos(answer, new_corpus) super_dict[answer] = sum_entropy_calculation(combs) df = pd.DataFrame([[key, val] for key, val in super_dict.items()], columns = [&#39;WORD&#39;,&#39;ENTROPY&#39;]) df[&#39;IN_CORPUS&#39;] = [1 if word in new_corpus else 0 for word in df[&#39;WORD&#39;]] df = df.sort_values([&#39;ENTROPY&#39;,&#39;IN_CORPUS&#39;], ascending=False) df.index = df[&#39;WORD&#39;] try: print(f&#39;{i} {df.iloc[0][&quot;WORD&quot;]}: {df.iloc[0][&quot;ENTROPY&quot;]:.2f}&#39;, end = &quot; &quot;) ind += 1 if ind % 4 == 0: print() except: pass . ⬜⬜⬜⬜⬜ LUNCH: 5.24 ⬜⬜⬜⬜🟨 BETEL: 5.02 ⬜⬜⬜⬜🟩 GUILE: 4.54 ⬜⬜⬜🟨⬜ TRICK: 4.40 ⬜⬜⬜🟨🟨 DETER: 4.40 ⬜⬜⬜🟨🟩 TRIPE: 3.52 ⬜⬜⬜🟩⬜ CHURN: 3.09 ⬜⬜⬜🟩🟨 FERRY: 2.84 ⬜⬜⬜🟩🟩 THERE: 2.00 ⬜⬜🟨⬜⬜ NATAL: 4.81 ⬜⬜🟨⬜🟨 PLEAT: 4.50 ⬜⬜🟨⬜🟩 ANGLE: 3.67 ⬜⬜🟨🟨⬜ RADAR: 4.21 ⬜⬜🟨🟨🟨 LATER: 3.49 ⬜⬜🟨🟨🟩 CARVE: 2.52 ⬜⬜🟨🟩⬜ HAIRY: 2.66 ⬜⬜🟨🟩🟨 ALERT: 1.92 ⬜⬜🟨🟩🟩 AFIRE: 1.00 ⬜⬜🟩⬜⬜ CLANK: 4.24 ⬜⬜🟩⬜🟨 DEATH: 3.49 ⬜⬜🟩⬜🟩 PLATE: 2.53 ⬜⬜🟩🟨⬜ DRAWN: 3.25 ⬜⬜🟩🟨🟨 REACH: 1.50 ⬜⬜🟩🟨🟩 CRATE: 2.29 ⬜⬜🟩🟩⬜ AWARD: 2.78 ⬜⬜🟩🟩🟨 TEARY: 1.88 ⬜⬜🟩🟩🟩 BLARE: 1.50 ⬜🟨⬜⬜⬜ BLOOD: 4.44 ⬜🟨⬜⬜🟨 DEMON: 3.91 ⬜🟨⬜⬜🟩 CLONE: 3.32 ⬜🟨⬜🟨⬜ FRONT: 3.61 ⬜🟨⬜🟨🟨 TENOR: 2.72 ⬜🟨⬜🟨🟩 PROVE: 2.07 ⬜🟨⬜🟩⬜ CHORD: 2.75 ⬜🟨⬜🟩🟨 METRO: 1.58 ⬜🟨⬜🟩🟩 CHORE: 1.00 ⬜🟨🟨⬜⬜ BLOAT: 4.26 ⬜🟨🟨⬜🟨 CAMEO: 2.00 ⬜🟨🟨⬜🟩 ANODE: 2.50 ⬜🟨🟨🟨⬜ BARON: 3.63 ⬜🟨🟨🟩⬜ ACORN: 2.25 ⬜🟨🟨🟩🟨 OPERA: 0.00 ⬜🟨🟨🟩🟩 ADORE: 0.00 ⬜🟨🟩⬜⬜ PIANO: 0.00 ⬜🟨🟩⬜🟩 OVATE: 0.00 ⬜🟨🟩🟨⬜ BRAVO: 0.00 ⬜🟨🟩🟩⬜ OVARY: 0.00 ⬜🟩⬜⬜⬜ DONUT: 3.87 ⬜🟩⬜⬜🟨 MOTEL: 3.00 ⬜🟩⬜⬜🟩 VOGUE: 2.72 ⬜🟩⬜🟨⬜ NORTH: 3.49 ⬜🟩⬜🟨🟨 ROWER: 2.11 ⬜🟩⬜🟨🟩 FORGE: 2.73 ⬜🟩⬜🟩⬜ DOWRY: 2.25 ⬜🟩🟨⬜⬜ NOMAD: 3.33 ⬜🟩🟨🟨⬜ MORAL: 2.75 ⬜🟩🟨🟩⬜ COBRA: 0.00 ⬜🟩🟩⬜⬜ LOAMY: 2.32 ⬜🟩🟩🟨⬜ ROACH: 0.00 ⬜🟩🟩🟩⬜ BOARD: 1.00 🟨⬜⬜⬜⬜ MUSHY: 4.10 🟨⬜⬜⬜🟨 GUEST: 3.58 🟨⬜⬜⬜🟩 DENSE: 2.75 🟨⬜⬜🟨⬜ CRUST: 3.58 🟨⬜⬜🟨🟨 RESET: 2.97 🟨⬜⬜🟨🟩 CURSE: 2.24 🟨⬜⬜🟩⬜ USURP: 0.00 🟨⬜🟨⬜⬜ NASTY: 3.80 🟨⬜🟨⬜🟨 ASHEN: 1.92 🟨⬜🟨⬜🟩 LAPSE: 2.87 🟨⬜🟨🟨⬜ HARSH: 2.00 🟨⬜🟨🟨🟩 ARISE: 1.58 🟨⬜🟩⬜⬜ CLASH: 2.84 🟨⬜🟩⬜🟨 BEAST: 1.37 🟨⬜🟩⬜🟩 CEASE: 2.24 🟨⬜🟩🟨⬜ CRASH: 1.84 🟨⬜🟩🟨🟩 ERASE: 0.00 🟨🟨⬜⬜⬜ GLOSS: 2.52 🟨🟨⬜⬜🟨 ONSET: 1.58 🟨🟨⬜⬜🟩 CHOSE: 1.92 🟨🟨⬜🟨⬜ CROSS: 1.92 🟨🟨⬜🟨🟨 VERSO: 0.00 🟨🟨⬜🟨🟩 PROSE: 0.00 🟨🟨🟨⬜⬜ ASCOT: 1.58 🟨🟨🟨🟨⬜ ARSON: 0.00 🟨🟨🟨🟨🟩 AROSE: 0.00 🟨🟨🟩⬜⬜ CHAOS: 0.00 🟨🟩⬜⬜⬜ MOIST: 3.01 🟨🟩⬜⬜🟨 NOSEY: 1.00 🟨🟩⬜⬜🟩 POISE: 1.67 🟨🟩⬜🟨⬜ ROOST: 2.00 🟨🟩⬜🟨🟨 LOSER: 1.00 🟨🟩⬜🟨🟩 HORSE: 1.58 🟨🟩🟩⬜⬜ BOAST: 0.92 🟨🟩🟩🟨⬜ ROAST: 0.00 🟩⬜⬜⬜⬜ STINK: 4.43 🟩⬜⬜⬜🟨 SPELT: 4.15 🟩⬜⬜⬜🟩 SPINE: 3.11 🟩⬜⬜🟨⬜ SCRUB: 2.42 🟩⬜⬜🟨🟨 SHEER: 2.72 🟩⬜⬜🟨🟩 SCREE: 2.00 🟩⬜⬜🟩⬜ SHIRT: 2.50 🟩⬜⬜🟩🟨 SPERM: 1.00 🟩⬜⬜🟩🟩 SHIRE: 1.00 🟩⬜🟨⬜⬜ SAUNA: 3.22 🟩⬜🟨⬜🟨 STEAD: 2.42 🟩⬜🟨⬜🟩 SAUCE: 1.58 🟩⬜🟨🟨⬜ SCRAP: 2.75 🟩⬜🟨🟨🟨 SHEAR: 1.46 🟩⬜🟩⬜⬜ SLANT: 3.48 🟩⬜🟩⬜🟩 SLATE: 2.29 🟩⬜🟩🟨⬜ STAIR: 0.00 🟩⬜🟩🟩⬜ STARK: 1.87 🟩⬜🟩🟩🟩 SCARE: 0.72 🟩🟨⬜⬜⬜ STOOP: 3.28 🟩🟨⬜⬜🟩 STOKE: 2.05 🟩🟨⬜🟨⬜ SCOUR: 0.00 🟩🟨⬜🟩⬜ SHORT: 2.17 🟩🟨⬜🟩🟩 SCORE: 0.65 🟩🟨🟨⬜⬜ SALON: 2.00 🟩🟨🟨🟨⬜ SAVOR: 0.00 🟩🟩⬜⬜⬜ SOOTY: 2.13 🟩🟩⬜⬜🟩 SOLVE: 0.00 🟩🟩⬜🟨🟨 SOBER: 1.00 🟩🟩⬜🟩⬜ SORRY: 0.00 🟩🟩🟨🟨⬜ SOLAR: 1.00 🟩🟩🟩⬜⬜ SOAPY: 0.00 . corpus = wordle_answers while len(corpus) &gt; 1: guess = input(&quot;GUESS: &quot;).upper() response = input(&quot;Response: &quot;).upper() response = response.replace(&quot;G&quot;,&quot;🟩&quot;).replace(&quot;Y&quot;,&quot;🟨&quot;).replace(&quot;W&quot;,&quot;⬜&quot;) print(response) corpus = get_words_using_sequence(guess, response, corpus) super_dict = {} for answer in valid_entries: combs = count_of_combos(answer, corpus) super_dict[answer] = sum_entropy_calculation(combs) df = pd.DataFrame([[key, val] for key, val in super_dict.items()], columns = [&#39;WORD&#39;,&#39;ENTROPY&#39;]) df[&#39;IN_CORPUS&#39;] = [1 if word in corpus else 0 for word in df[&#39;WORD&#39;]] df = df.sort_values([&#39;ENTROPY&#39;,&#39;IN_CORPUS&#39;], ascending=False) df.index = df[&#39;WORD&#39;] df = df[[False if entropy == 1 and in_corpus == 0 else True for entropy, in_corpus in zip(df[&#39;ENTROPY&#39;], df[&#39;IN_CORPUS&#39;])]] df = df[[False if entropy == 0 and in_corpus == 0 else True for entropy, in_corpus in zip(df[&#39;ENTROPY&#39;], df[&#39;IN_CORPUS&#39;])]] df.drop([&#39;WORD&#39;,&#39;IN_CORPUS&#39;], axis = 1, inplace=True) print(&#39;Possible Answers&#39;, corpus) print(&quot;Entropy Calculations&quot;) print(df.head(20)) . GUESS: MOUSE Response: GGGGG 🟩🟩🟩🟩🟩 Possible Answers [&#39;MOUSE&#39;] Entropy Calculations ENTROPY WORD MOUSE 0.0 .",
            "url": "https://michaelhotaling.github.io/blog/painbow/",
            "relUrl": "/painbow/",
            "date": " • Feb 4, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Generating the Painbow Color Gradient from XKCD",
            "content": ". import matplotlib.pyplot as plt import matplotlib.colors as mcolors import numpy as np . def make_colormap(seq): seq = [(None,) * 3, 0.0] + list(seq) + [1.0, (None,) * 3] cdict = {&#39;red&#39;: [], &#39;green&#39;: [], &#39;blue&#39;: []} for i, item in enumerate(seq): if isinstance(item, float): r1, g1, b1 = seq[i - 1] r2, g2, b2 = seq[i + 1] cdict[&#39;red&#39;].append([item, r1, r2]) cdict[&#39;green&#39;].append([item, g1, g2]) cdict[&#39;blue&#39;].append([item, b1, b2]) return mcolors.LinearSegmentedColormap(&#39;CustomMap&#39;, cdict) c = mcolors.ColorConverter().to_rgb painbow = make_colormap( [c(&#39;#ffffff&#39;), c(&#39;#ffffff&#39;), 0.02, # white to white c(&#39;#ffffff&#39;), c(&#39;#000000&#39;), 0.15, # white to black c(&#39;#000000&#39;), c(&#39;#5c6889&#39;), 0.25, # black to gray c(&#39;#5c6889&#39;), c(&#39;#1f7c61&#39;), 0.30, # gray to green c(&#39;#1f7c61&#39;), c(&#39;#ff0000&#39;), 0.35, # green to red c(&#39;#ff0000&#39;), c(&quot;#0bc21d&quot;), 0.75, # red to light green c(&quot;#0bc21d&quot;), c(&quot;#cbf26e&quot;), 0.90, # light green to yellow c(&#39;#cbf26e&#39;), c(&quot;#e7e9e1&quot;), 1 , # yellow to white c(&#39;#e7e9e1&#39;)]) # white . painbow . CustomMap underbad over def f(x, y): return np.sin(x*3) + np.sin(y*3) x = np.linspace(0, 5, 1000) y = np.linspace(0, 5, 1000) X, Y = np.meshgrid(x, y) Z = f(X, Y) plt.figure(figsize=(16,9)) plt.contourf(X, Y, -Z, 500, cmap=painbow) plt.colorbar(); .",
            "url": "https://michaelhotaling.github.io/blog/painbow/",
            "relUrl": "/painbow/",
            "date": " • Feb 3, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://michaelhotaling.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://michaelhotaling.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hi there 👋 My name is Michael . I&#39;m a data scientist and engineer at Applied Materials, putting the power of artificial intelligence and machine learning at the edge of the Industrial Internet of Things, Industry 4.0, and next-generation Smart Factory Automation. I specialize in early failure detection for machinery, prognostic analysis, dashboards, visualization, and exploratory data analysis. I’m looking to collaborate on data science projects, machine learning, and applications of data science in other fields . . &lt;img src=https://img.shields.io/badge/github-%2324292e.svg?&amp;style=for-the-badge&amp;logo=github&amp;logoColor=white alt=github style=”margin-bottom: 5px;” /&gt; &lt;img src=https://img.shields.io/badge/twitter-00acee?style=for-the-badge&amp;logo=Twitter&amp;logoColor=white alt=twitter style=”margin-bottom: 5px;” /&gt; &lt;img src=https://img.shields.io/badge/linkedin-%231E77B5.svg?&amp;style=for-the-badge&amp;logo=linkedin&amp;logoColor=white alt=linkedin style=”margin-bottom: 5px;” /&gt; . About me! . 🧑‍💻 I’m currently working on . Building predictive models for semiconductor equipment to predict failures before they impact production | Writing a book on Practical Prognostics with Python (Stay tuned!) | Developing stock trading algorithms to reduce volatility exposure and beat common index returns | . My Certifications . Coursera . University At Buffalo - Digital Manufacturing &amp; Design Technology Specialization Digital Manufacturing &amp; Design | Digital Thread: Components | Digital Thread: Implementation | Advanced Manufacturing Process Analysis | Intelligent Machining | Advanced Manufacturing Enterprise | Cyber Security in Manufacturing | MBSE: Model-Based Systems Engineering | Roadmap to Success in Digital Manufacturing &amp; Design | . | Technical University of Munich - Digitalization in Aeronautics and Space Specialization Digitalization in the Aerospace Industry | Digitalization in Space Research | Digitalization in Aeronautics | . | Duke University - Nanotechnology: A Maker’s Course | . Udemy . Data Science and Machine Learning Bootcamp with R | . EdX . Work History . . Data Scientist | November 2014 - Present | . . Research Assistant | June 2013 - July 2014 | . . . Languages and Tools . Languages I Use . . Libraries I Use . . Visualization Software . . Machine Learning and Deep Learning . . Big Data . . Quantum Computing . . Version Control . . Specalized Software Experience . .",
          "url": "https://michaelhotaling.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://michaelhotaling.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}